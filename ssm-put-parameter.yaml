AWSTemplateFormatVersion: 2010-09-09
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /cfn-lambda/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ssm:DeleteParameter
                  - ssm:PutParameter
                  - ssm:GetParameter
                Resource: "*"
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          from botocore.exceptions import ClientError
          import cfnresponse
          import secrets
          import string
          import traceback
          from logging import getLogger, DEBUG
          logger = getLogger()
          logger.setLevel(DEBUG)

          class SsmPut(object):
            def __init__(self, request, context):
              self.context = context
              self.request = request
              self.ssm = boto3.client('ssm',region_name=self.get('Region'))
            @property
            def properties(self):
              return self.request['ResourceProperties']
            @property
            def old_properties(self):
              return self.request['OldResourceProperties']
            @property
            def request_type(self):
              return self.request['RequestType']
            @property
            def physical_resource_id(self):
              return self.request['PhysicalResourceId']
            def get(self, name, default=None):
              return self.properties.get(name, default)
            def get_old(self, name, default=None):
              return self.old_properties.get(name, default)
            @property
            def id(self):
              return self.get('Name')

            def ssm_put(self, overwrite=False):
              self.ssm.put_parameter(
                Name=self.get('Name'),
                Value=self.get('Value'),
                Type=self.get('Type'),
                Overwrite=overwrite
              )

            def ssm_get(self):
              try:
                value = self.ssm.get_parameter(
                  Name=self.get('Name'),
                  WithDecryption=True
                )['Parameter']['Value']
                return value
              except ClientError as e:
                logger.info(e)
                return None

            def ssm_get_old(self):
              try:
                value = self.ssm.get_parameter(
                  Name=self.get_old('Name'),
                  WithDecryption=True
                )['Parameter']['Value']
                return value
              except ClientError as e:
                logger.info(e)
                return None

            def create(self):
              self.ssm_put(False)

            def update(self):
              policy = self.get('UpdatePolicy')
              if self.get('Name') != self.get_old('Name'):
                self.ssm_put(False)
                self.ssm.delete_parameter(Name=self.get_old('Name'))
              else:
                self.ssm_put(True)

            def delete(self):
              policy = self.get('DeletionPolicy')
              if policy == 'IgnoreError':
                try:
                  self.ssm.delete_parameter(Name=self.get('Name'))
                except Exception as e:
                  pass
              elif policy == 'Delete':
                self.ssm.delete_parameter(Name=self.get('Name'))
              elif policy == 'Retain':
                pass
              else:
                pass # Retain

            def handle(self):
              value = ''
              try:
                if self.request_type == 'Create':
                  value = self.create()
                elif self.request_type == 'Update':
                  value = self.update()
                elif self.request_type == 'Delete':
                  self.delete()
                else:
                  raise
                physical_resource_id = self.id
                cfnresponse.send(self.request, self.context, cfnresponse.SUCCESS, {}, physical_resource_id)
              except Exception as e:
                traceback.print_exc()
                cfnresponse.send(self.request, self.context, cfnresponse.FAILED, {})

          def handler(event, context):
            ssm = SsmPut(event, context)
            return ssm.handle()

      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt Role.Arn
      FunctionName: !Ref AWS::StackName
      MemorySize: 128
      Timeout: 20

Outputs:
  LambdaArn:
    Value: !GetAtt Lambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}:LambdaArn
